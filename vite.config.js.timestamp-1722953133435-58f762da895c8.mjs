// vite.config.js
import { defineConfig } from "file:///home/dumbcache/Documents/Projects/pocket-drive-extension/node_modules/.pnpm/vite@5.3.5_@types+node@22.0.0/node_modules/vite/dist/node/index.js";
import { svelte } from "file:///home/dumbcache/Documents/Projects/pocket-drive-extension/node_modules/.pnpm/@sveltejs+vite-plugin-svelte@3.1.1_svelte@5.0.0-next.210_vite@5.3.5_@types+node@22.0.0_/node_modules/@sveltejs/vite-plugin-svelte/src/index.js";
import { resolve } from "path";
import path from "path";
import fs from "fs";
var __vite_injected_original_dirname = "/home/dumbcache/Documents/Projects/pocket-drive-extension";
var BUILD_PATH = "app";
function moveHTML() {
  return {
    name: "move-html",
    generateBundle(options, bundle) {
      for (const [fileName, file] of Object.entries(bundle)) {
        if (fileName.endsWith(".html")) {
          const entryName = fileName.replace(/^src\//, "");
          const outputPath = path.resolve(options.dir, entryName);
          fs.mkdirSync(path.dirname(outputPath), { recursive: true });
          fs.writeFileSync(outputPath, file.source);
        }
      }
    }
  };
}
function cleanupPlugin() {
  return {
    name: "cleanup-plugin",
    closeBundle() {
      const buildDir = path.resolve(BUILD_PATH);
      const srcDir = path.join(buildDir, "src");
      if (fs.existsSync(srcDir)) {
        fs.rmSync(srcDir, { recursive: true, force: true });
        console.log("Removed src directory from build folder.");
      }
    }
  };
}
function copyFilesPlugin() {
  return {
    name: "copy-files",
    closeBundle() {
      const buildDir = path.resolve(BUILD_PATH);
      const srcManifest = path.resolve("src/manifest.json");
      const destManifest = path.join(buildDir, "manifest.json");
      if (fs.existsSync(srcManifest)) {
        fs.copyFileSync(srcManifest, destManifest);
        console.log("Copied manifest.json to build folder.");
      } else {
        console.log("No manifest.json found.");
      }
      const srcAssetsDir = path.resolve("src/assets");
      const destAssetsDir = path.join(buildDir, "assets");
      if (fs.existsSync(srcAssetsDir)) {
        copyDirectorySync(srcAssetsDir, destAssetsDir);
        console.log("Copied assets directory to build folder.");
      } else {
        console.log("No assets directory found.");
      }
    }
  };
}
function copyDirectorySync(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  const entries = fs.readdirSync(src, { withFileTypes: true });
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    if (entry.isDirectory()) {
      copyDirectorySync(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}
var vite_config_default = defineConfig({
  plugins: [svelte()],
  resolve: {
    alias: {
      "@assets": path.resolve(__vite_injected_original_dirname, "src/assets"),
      "@components": path.resolve(__vite_injected_original_dirname, "src/components"),
      "@scripts": path.resolve(__vite_injected_original_dirname, "src/components/scripts")
    }
  },
  build: {
    rollupOptions: {
      input: {
        // popup: resolve(__dirname, "src/popup/sidepanel.html"),
        content: resolve(__vite_injected_original_dirname, "src/content/content.js"),
        sleeper: resolve(__vite_injected_original_dirname, "src/content/sleeper.js"),
        sidepanel: resolve(__vite_injected_original_dirname, "src/sidepanel/sidepanel.html"),
        worker: resolve(__vite_injected_original_dirname, "src/worker/worker.js")
      },
      output: {
        dir: BUILD_PATH,
        entryFileNames: "[name]/[name].js",
        chunkFileNames: "chunks/[name].js",
        assetFileNames: (assetInfo) => {
          if (assetInfo.name.endsWith(".css")) {
            return "[name]/[name][extname]";
          }
          return "[name][extname]";
        }
      },
      plugins: [
        moveHTML(),
        // updateHtmlPaths(),
        cleanupPlugin(),
        copyFilesPlugin()
      ]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
